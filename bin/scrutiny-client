#!/usr/bin/env node

/**
 * Module dependencies.
 */

var program = require('commander');
var prettyjson = require('prettyjson');
var seneca = require('seneca')({
    log: {
      map: [] // Disable logging by passing no filters
    }
  }).client()
  .use('entity')

program
  .version('0.0.1')

program
  .command('init <server> <table>')
  .description('initialize a staging table for scrutiny')
  .action(function(server, table) {
    seneca.act({role: 'staging', action: 'create', table: table, server_name: server},function(err) {
      if (err) { console.log(err.msg); return }

      console.log('initialized staging table')
    })
  })

program
  .command('destroy <table>')
  .description('destroy a staging table from scrutiny')
  .action(function(table) {
    seneca.act({role: 'staging', action: 'drop', table: table},function(err) {
      if (err) { console.log(err.msg); return }

      console.log('destroyed staging table')
    })
  })


program
  .command('list [type]')
  .description('list audits in scrutiny')
  .option('-s, --schema <schema>', 'Filter by schema')
  .action(function(type, options) {
    var action = {
      role:'audit',
      action: 'list'
    }

    if(type) { action['status'] = type }
    if(options.schema) { action['schema'] = options.schema }

    seneca.act(action, function(err, audits){
      if (err) { console.log(err.msg); return }
      audits.forEach((audit)=>{
        console.log('--------------------------');
        console.log(
          prettyjson.render({
            id: audit.id,
            name: audit.name,
            status: audit.status,
            table: audit.table_name.replace(/staging_/,''),
            staging_table: audit.table_name,
            foreign_table: audit.table_name.replace(/staging_/,'foreign_')
          }));
        console.log('--------------------------\n');
      })

    })
  })

program
  .command('create <table> <job_id>')
  .description('create an audit')
  .option('-n, --name <name>','the name of the audit')
  .action(function(table, job_id, options) {
    seneca.act({role:'audit', action:'create', job_id:job_id, table:table, name:options.name}, function(err, audit){
      if (err) { console.log(err.msg); return }

      console.log(`[created audit]\nid: ${audit.id}\nname: ${audit.name}\ntable: ${audit.table_name}`);
    })
  })

  program
    .command('status <id>')
    .description('status of an audit')
    .action(function(id) {
      seneca.act({role:'audit', action:'get', id:id}, function(err, audit){
        if (err) { console.log(err.msg); return }

        console.log(`${audit.name} ${audit.status}`);
      })
    })

program
  .command('submit <id>')
  .description('submit an audit')
  .action(function(id) {
    seneca.act({role:'audit', action:'get', id:id}, function(err, audit){
      if (err) { console.log(err.msg); return }

      seneca.client().act({role:'audit', action:'submit', audit:audit}, function(err, audit){
          if (err) { console.log(err.msg); return }

          console.log(`${audit.name} submitted`);
      })
    })
  })

program
  .command('approve <id>')
  .description('approve an audit')
  .action(function(id) {
    seneca.act({role:'audit', action:'get', id:id}, function(err, audit){
      if (err) { console.error(err); return }

      seneca.client().act({role:'audit', action:'approve', audit:audit}, function(err, audit){
          if (err) { console.error(err.msg); return }

          console.log(`${audit.name} approved`);
      })
    })
  })

program
  .command('reject <id>')
  .description('reject an audit')
  .action(function(id) {
    seneca.act({role:'audit', action:'get', id:id}, function(err, audit){
      if (err) { console.log(err.msg); return }

      seneca.client().act({role:'audit', action:'reject', audit:audit}, function(err, audit){
          if (err) { console.log(err.msg); return }

          console.log(`${audit.name} rejected`);
      })
    })
  })

program.parse(process.argv);
