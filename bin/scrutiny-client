#!/usr/bin/env node

/**
 * Module dependencies.
 */

var program = require('commander');
var prettyjson = require('prettyjson');
var seneca = require('seneca')({
    log: {
      map: [] // Disable logging by passing no filters
    }
  }).client()
  .use('entity')

program
  .version('0.0.1')

program
  .command('init <server> <table>')
  .description('initialize a staging table for scrutiny')
  .option('-n, --name <stage_name>','the name of the stage')
  .action(function(server, table, options) {
    var name = options.stage_name || table
    seneca.act({role: 'staging', action: 'create', table: table, server_name: server, name:name},function(err, stage) {
      if (err) { console.log(err.msg); return }
      console.log('-----------------------------');
      console.log('+ initialized staging table +')
      console.log('-----------------------------');
      console.log(
        prettyjson.render({
          id: stage.id,
          name: stage.name,
          table: stage.table,
          staging_table: stage.staging_table,
          foreign_table: stage.foreign_table
        }));
      console.log('----------------------------');
    })
  })

program
  .command('destroy <stage_id>')
  .description('destroy a stage from scrutiny')
  .action(function(stage_id) {
    seneca.act({role:'staging', action:'get', id:stage_id}, function(err, stage){
      if (err) { console.error(err); return }
      seneca.act({role: 'staging', action: 'drop', stage: stage},function(err) {
        if (err) { console.log(err.msg); return }
        console.log('----------------------------------');
        console.log('+ destroyed staging environment +')
        console.log('----------------------------------');
      })
    })
  })

  program
    .command('clear')
    .description('delete all audits')
    .action(function() {
      seneca.act({role:'audit', action:'clear'}, function(err){
        if (err) { console.error(err); return }
          console.log('----------------------------------');
          console.log('+       deleted all audits       +')
          console.log('----------------------------------');
      })
    })


program
  .command('list [type]')
  .description('list audits in scrutiny')
  .option('-s, --schema <schema>', 'Filter by schema')
  .action(function(type, options) {
    var action = {
      role:'audit',
      action: 'list'
    }

    if(type) {
      action['status'] = type
    }
    else {
      action['open'] = true
    }
    if(options.schema) { action['schema'] = options.schema }

    seneca.act(action, function(err, audits){
      if (err) { console.log(err.msg); return }
      audits.forEach((audit)=>{
        console.log('--------------------------');
        console.log(
          prettyjson.render({
            id: audit.id,
            name: audit.name,
            status: audit.status,
          }));
        console.log('--------------------------\n');
      })

    })
  })

program
  .command('create <stage> <job_id>')
  .description('create an audit')
  .option('-n, --name <audit_name>','the name of the audit')
  .action(function(stage, job_id, options) {
    seneca.act({role:'staging', action:'get', id:stage}, function(err, stage){
      if (err) { console.error(err); return }

      seneca.act({role:'audit', action:'create', job_id:job_id, stage_id:stage.id, name:options.audit_name}, function(err, audit){
        if (err) { console.log(err.msg); return }

        seneca.act({role:'audit', action:'analyze', audit:audit}, function(err, results){
          if (err) { console.log(err.msg); return }

          console.log('-----------------');
          console.log(`+ created audit +`)
          console.log('-----------------');
          console.log(prettyjson.render({
            id: audit.id,
            name: audit.name,
            created_at: audit.created_at,
            status: audit.status,
            inserts: results.inserts,
            updates: results.updates,
            deletes: results.deletes,
            beforeCommit: results.beforeCommit,
            afterCommit: results.afterCommit,
            stage: audit.stage
          }));
          console.log('-----------------');
        })

      })
    })
  })

  program
    .command('status <id>')
    .description('status of an audit')
    .action(function(id) {
      seneca.act({role:'audit', action:'get', id:id}, function(err, audit){
        if (err) { console.log(err.msg); return }

        console.log('-----------------');
        console.log(`+ ${audit.name} +`)
        console.log('-----------------');
        console.log(prettyjson.render({
          status: audit.status
        }));
        console.log('-----------------');
      })
    })

program
  .command('submit <id>')
  .description('submit an audit')
  .action(function(id) {
      seneca.act({role:'audit', action:'submit', id:id}, function(err, audit){
          if (err) { console.log(err.msg); return }
          console.log('-----------------');
          console.log(`+ ${audit.name} +`)
          console.log('-----------------');
          console.log(prettyjson.render({
            status: audit.status
          }));
          console.log('-----------------');
      })
  })

program
  .command('approve <id>')
  .description('approve an audit')
  .action(function(id) {
      seneca.client().act({role:'audit', action:'approve', id:id}, function(err, audit){
          if (err) { console.error(err.msg); return }
          console.log('-----------------');
          console.log(`+ ${audit.name} +`)
          console.log('-----------------');
          console.log(prettyjson.render({
            status: audit.status
          }));
          console.log('-----------------');
      })
  })

program
  .command('reject <id>')
  .description('reject an audit')
  .action(function(id) {
      seneca.client().act({role:'audit', action:'reject', id:id}, function(err, audit){
          if (err) { console.log(err.msg); return }
          console.log('-----------------');
          console.log(`+ ${audit.name} +`)
          console.log('-----------------');
          console.log(prettyjson.render({
            status: audit.status
          }));
          console.log('-----------------');
      })
  })

program.parse(process.argv);
